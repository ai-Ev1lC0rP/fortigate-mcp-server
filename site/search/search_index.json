{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FortiGate MCP Server","text":"<p>An MCP (Model Context Protocol) server for managing FortiGate devices using FastMCP.</p>"},{"location":"#features","title":"Features","text":""},{"location":"#device-management","title":"Device Management","text":"<ul> <li>\u2705 Add / remove devices</li> <li>\u2705 List configured devices</li> <li>\u2705 System status and device info</li> <li>\u2705 VDOMs discovery</li> </ul>"},{"location":"#firewall-policy-management","title":"Firewall Policy Management","text":"<ul> <li>\u2705 List existing policies</li> <li>\u2705 Create new policies</li> <li>\u2705 Modify existing policies</li> <li>\u2705 Delete policies</li> <li>\u2705 Policy validation</li> <li>\u2705 Policy search and filtering</li> <li>\u2705 Policy statistics</li> </ul>"},{"location":"#network-objects-management","title":"Network Objects Management","text":"<ul> <li>\u2705 Address objects (IP, range, FQDN)</li> <li>\u2705 Service objects (TCP / UDP)</li> <li>\u2705 VIP objects management</li> <li>\ud83d\udd04 Complete CRUD operations (partially implemented)</li> </ul>"},{"location":"#security-profiles-management","title":"Security Profiles Management","text":"<ul> <li>\u2705 Antivirus profiles (create, delete, list)</li> <li>\u2705 Web Filter profiles (create, delete, list)</li> <li>\u2705 IPS sensors (create, delete, list)</li> <li>\u2705 SSL/SSH inspection profiles (create, delete, list)</li> <li>\u2705 DNS Filter profiles (create, delete, list)</li> </ul>"},{"location":"#user-management","title":"User Management","text":"<ul> <li>\u2705 Local users (create, update, delete, list)</li> <li>\u2705 User groups (create, delete, list)</li> <li>\u2705 LDAP authentication servers (create, delete, list)</li> <li>\u2705 RADIUS authentication servers (create, delete, list)</li> </ul>"},{"location":"#vpn-management","title":"VPN Management","text":"<ul> <li>\u2705 IPSec Phase 1 interfaces (create, delete, list)</li> <li>\u2705 IPSec Phase 2 interfaces (create, delete, list)</li> <li>\u2705 IPSec tunnel status monitoring</li> <li>\u2705 SSL VPN settings and portals (create, delete, configure)</li> <li>\u2705 SSL VPN status monitoring</li> <li>\u2705 VPN certificates management</li> </ul>"},{"location":"#system-administration","title":"System Administration","text":"<ul> <li>\u2705 Configuration backup and restore</li> <li>\u2705 System performance monitoring</li> <li>\u2705 Bandwidth usage statistics</li> <li>\u2705 Session table monitoring</li> <li>\u2705 System, traffic, and security logs</li> <li>\u2705 License and firmware information</li> <li>\u2705 System reboot and shutdown</li> </ul>"},{"location":"#advanced-features","title":"Advanced Features","text":"<ul> <li>\u2705 High Availability (status, configuration, failover)</li> <li>\u2705 SD-WAN zones and members management</li> <li>\u2705 SD-WAN performance and health monitoring</li> <li>\u2705 FortiView statistics and analytics</li> <li>\u2705 Threat dashboard and security ratings</li> <li>\u2705 Policy usage analytics</li> <li>\u2705 Application control statistics</li> </ul>"},{"location":"#routing-management","title":"Routing Management","text":"<ul> <li>\u2705 Static routes</li> <li>\u2705 Routing table</li> <li>\u2705 Policy routing</li> <li>\u2705 Interface list</li> </ul>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Clone repository</li> </ol> <pre><code>git clone https://github.com/Filippo125/fortigate-mcp-server.git\ncd fortigate-mcp-server\n</code></pre> <ol> <li>Install dependencies</li> </ol> <pre><code>uv sync\n</code></pre> <ol> <li>Configure devices</li> </ol> <pre><code>cp config.yaml.template config.yaml\n# Edit config.yaml with your FortiGate device details\n</code></pre> <ol> <li>Start server</li> </ol> <pre><code>uv run python server.py\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<p>Run the comprehensive endpoint test suite:</p> <pre><code># Using environment variables\nexport FORTIGATE_HOST=\"your-fortigate-ip:port\"\nexport FORTIGATE_TOKEN=\"your-api-token\"\npython test_endpoints.py\n\n# Or using config.yaml file\npython test_endpoints.py\n</code></pre> <p> </p>  Made with \u2764\ufe0f by Filippo Vicentini"},{"location":"advanced/","title":"Advanced","text":""},{"location":"advanced/#mcptool.advanced.fortigate_configure_ha","title":"<code>fortigate_configure_ha(device_id, mode='a-p', group_id=1, group_name=None, password=None, hbdev=None, session_pickup='enable', session_pickup_connectionless='enable', override='disable', priority=128, vdom='root')</code>","text":"<p>Configure High Availability settings</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>mode</code> <code>str</code> <p>HA mode (a-p, a-a, standalone)</p> <code>'a-p'</code> <code>group_id</code> <code>int</code> <p>HA group ID</p> <code>1</code> <code>group_name</code> <code>Optional[str]</code> <p>HA group name (optional)</p> <code>None</code> <code>password</code> <code>Optional[str]</code> <p>HA authentication password (optional)</p> <code>None</code> <code>hbdev</code> <code>Optional[List[str]]</code> <p>Heartbeat devices (optional)</p> <code>None</code> <code>session_pickup</code> <code>str</code> <p>Session pickup (enable, disable)</p> <code>'enable'</code> <code>session_pickup_connectionless</code> <code>str</code> <p>Connectionless session pickup (enable, disable)</p> <code>'enable'</code> <code>override</code> <code>str</code> <p>Override (enable, disable)</p> <code>'disable'</code> <code>priority</code> <code>int</code> <p>HA priority (1-255)</p> <code>128</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of HA configuration</p> Source code in <code>mcptool/advanced.py</code> <pre><code>@mcp.tool()\ndef fortigate_configure_ha(device_id: str, \n                         mode: str = \"a-p\",\n                         group_id: int = 1,\n                         group_name: Optional[str] = None,\n                         password: Optional[str] = None,\n                         hbdev: Optional[List[str]] = None,\n                         session_pickup: str = \"enable\",\n                         session_pickup_connectionless: str = \"enable\",\n                         override: str = \"disable\",\n                         priority: int = 128,\n                         vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Configure High Availability settings\n\n    Args:\n        device_id: Device ID\n        mode: HA mode (a-p, a-a, standalone)\n        group_id: HA group ID\n        group_name: HA group name (optional)\n        password: HA authentication password (optional)\n        hbdev: Heartbeat devices (optional)\n        session_pickup: Session pickup (enable, disable)\n        session_pickup_connectionless: Connectionless session pickup (enable, disable)\n        override: Override (enable, disable)\n        priority: HA priority (1-255)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of HA configuration\n    \"\"\"\n    try:\n        ha_data = {\n            \"mode\": mode,\n            \"group-id\": group_id,\n            \"session-pickup\": session_pickup,\n            \"session-pickup-connectionless\": session_pickup_connectionless,\n            \"override\": override,\n            \"priority\": priority\n        }\n\n        if group_name:\n            ha_data[\"group-name\"] = group_name\n        if password:\n            ha_data[\"password\"] = password\n        if hbdev:\n            ha_data[\"hbdev\"] = \" \".join(hbdev)\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.configure_ha(ha_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"advanced/#mcptool.advanced.fortigate_create_sdwan_zone","title":"<code>fortigate_create_sdwan_zone(device_id, name, service_sla_tie_break='zone', minimum_sla_meet_members=1, comments=None, vdom='root')</code>","text":"<p>Create SD-WAN zone</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Zone name</p> required <code>service_sla_tie_break</code> <code>str</code> <p>SLA tie break method</p> <code>'zone'</code> <code>minimum_sla_meet_members</code> <code>int</code> <p>Minimum SLA meet members</p> <code>1</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of zone creation</p> Source code in <code>mcptool/advanced.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_sdwan_zone(device_id: str, name: str,\n                               service_sla_tie_break: str = \"zone\",\n                               minimum_sla_meet_members: int = 1,\n                               comments: Optional[str] = None,\n                               vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create SD-WAN zone\n\n    Args:\n        device_id: Device ID\n        name: Zone name\n        service_sla_tie_break: SLA tie break method\n        minimum_sla_meet_members: Minimum SLA meet members\n        comments: Comments (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of zone creation\n    \"\"\"\n    try:\n        zone_data = {\n            \"name\": name,\n            \"service-sla-tie-break\": service_sla_tie_break,\n            \"minimum-sla-meet-members\": minimum_sla_meet_members\n        }\n\n        if comments:\n            zone_data[\"comment\"] = comments\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_sdwan_zone(zone_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"advanced/#mcptool.advanced.fortigate_get_application_statistics","title":"<code>fortigate_get_application_statistics(device_id, vdom='root')</code>","text":"<p>Get application control statistics</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Application usage and control statistics</p> Source code in <code>mcptool/advanced.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_application_statistics(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get application control statistics\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Application usage and control statistics\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        app_stats = api.get_application_statistics(vdom)\n        return json.dumps(app_stats, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"advanced/#mcptool.advanced.fortigate_get_fortiview_statistics","title":"<code>fortigate_get_fortiview_statistics(device_id, chart_type='top-sources', vdom='root')</code>","text":"<p>Get FortiView statistics</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>chart_type</code> <code>str</code> <p>Chart type (top-sources, top-destinations, top-applications, top-websites)</p> <code>'top-sources'</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>FortiView statistical data</p> Source code in <code>mcptool/advanced.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_fortiview_statistics(device_id: str, \n                                     chart_type: str = \"top-sources\",\n                                     vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get FortiView statistics\n\n    Args:\n        device_id: Device ID\n        chart_type: Chart type (top-sources, top-destinations, top-applications, top-websites)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        FortiView statistical data\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        statistics = api.get_fortiview_statistics(chart_type, vdom)\n        return json.dumps(statistics, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"advanced/#mcptool.advanced.fortigate_get_ha_status","title":"<code>fortigate_get_ha_status(device_id)</code>","text":"<p>Get High Availability status</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <p>Returns:</p> Type Description <code>str</code> <p>HA cluster status and peer information</p> Source code in <code>mcptool/advanced.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_ha_status(device_id: str) -&gt; str:\n    \"\"\"\n    Get High Availability status\n\n    Args:\n        device_id: Device ID\n\n    Returns:\n        HA cluster status and peer information\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        ha_status = api.get_ha_status()\n        return json.dumps(ha_status, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"advanced/#mcptool.advanced.fortigate_get_policy_usage","title":"<code>fortigate_get_policy_usage(device_id, vdom='root')</code>","text":"<p>Get firewall policy usage statistics</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Policy usage statistics (hit counts, last used)</p> Source code in <code>mcptool/advanced.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_policy_usage(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get firewall policy usage statistics\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Policy usage statistics (hit counts, last used)\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        usage = api.get_policy_usage(vdom)\n        return json.dumps(usage, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"advanced/#mcptool.advanced.fortigate_get_sdwan_health_check","title":"<code>fortigate_get_sdwan_health_check(device_id, vdom='root')</code>","text":"<p>Get SD-WAN health check status</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>SD-WAN health check status for all members</p> Source code in <code>mcptool/advanced.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_sdwan_health_check(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get SD-WAN health check status\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        SD-WAN health check status for all members\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        health_check = api.get_sdwan_health_check(vdom)\n        return json.dumps(health_check, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"advanced/#mcptool.advanced.fortigate_get_sdwan_members","title":"<code>fortigate_get_sdwan_members(device_id, vdom='root')</code>","text":"<p>Get SD-WAN members</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of SD-WAN member interfaces</p> Source code in <code>mcptool/advanced.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_sdwan_members(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get SD-WAN members\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of SD-WAN member interfaces\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        members = api.get_sdwan_members(vdom)\n        return json.dumps(members, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"advanced/#mcptool.advanced.fortigate_get_sdwan_performance","title":"<code>fortigate_get_sdwan_performance(device_id, vdom='root')</code>","text":"<p>Get SD-WAN performance SLA statistics</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>SD-WAN performance and SLA metrics</p> Source code in <code>mcptool/advanced.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_sdwan_performance(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get SD-WAN performance SLA statistics\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        SD-WAN performance and SLA metrics\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        performance = api.get_sdwan_performance(vdom)\n        return json.dumps(performance, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"advanced/#mcptool.advanced.fortigate_get_sdwan_zones","title":"<code>fortigate_get_sdwan_zones(device_id, vdom='root')</code>","text":"<p>Get SD-WAN zones</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of SD-WAN zones</p> Source code in <code>mcptool/advanced.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_sdwan_zones(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get SD-WAN zones\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of SD-WAN zones\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        zones = api.get_sdwan_zones(vdom)\n        return json.dumps(zones, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"advanced/#mcptool.advanced.fortigate_get_threat_dashboard","title":"<code>fortigate_get_threat_dashboard(device_id, vdom='root')</code>","text":"<p>Get threat dashboard data</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Security rating and threat intelligence data</p> Source code in <code>mcptool/advanced.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_threat_dashboard(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get threat dashboard data\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Security rating and threat intelligence data\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        threat_data = api.get_threat_dashboard(vdom)\n        return json.dumps(threat_data, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"advanced/#mcptool.advanced.fortigate_ha_failover","title":"<code>fortigate_ha_failover(device_id)</code>","text":"<p>Trigger HA failover</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <p>Returns:</p> Type Description <code>str</code> <p>Result of failover operation</p> Source code in <code>mcptool/advanced.py</code> <pre><code>@mcp.tool()\ndef fortigate_ha_failover(device_id: str) -&gt; str:\n    \"\"\"\n    Trigger HA failover\n\n    Args:\n        device_id: Device ID\n\n    Returns:\n        Result of failover operation\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.ha_failover()\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"base/","title":"Base","text":""},{"location":"base/#mcptool.base.fortigate_add_device","title":"<code>fortigate_add_device(device_id, host, token, vdoms=None)</code>","text":"<p>Adds a new Fortigate device</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Unique identifier of the device</p> required <code>host</code> <code>str</code> <p>IP address or hostname of the Fortigate</p> required <code>token</code> <code>str</code> <p>API token for authentication</p> required <code>vdoms</code> <code>List[str]</code> <p>List of VDOMs (optional, default: ['root'])</p> <code>None</code> Source code in <code>mcptool/base.py</code> <pre><code>@mcp.tool()\ndef fortigate_add_device(device_id: str, host: str, token: str, vdoms: List[str] = None) -&gt; str:\n\t\"\"\"Adds a new Fortigate device\n\n\tArgs:\n\t    device_id: Unique identifier of the device\n\t    host: IP address or hostname of the Fortigate\n\t    token: API token for authentication\n\t    vdoms: List of VDOMs (optional, default: ['root'])\n\t\"\"\"\n\ttry:\n\t\tfortigate_manager.add_device(device_id, host, token, vdoms or ['root'])\n\t\treturn f\"Device {device_id} added successfully\"\n\texcept Exception as e:\n\t\treturn f\"Errore: {str(e)}\"\n</code></pre>"},{"location":"base/#mcptool.base.fortigate_list_devices","title":"<code>fortigate_list_devices()</code>","text":"<p>List all configured Fortigate devices</p> Source code in <code>mcptool/base.py</code> <pre><code>@mcp.tool()\ndef fortigate_list_devices() -&gt; str:\n\t\"\"\"List all configured Fortigate devices\"\"\"\n\ttry:\n\t\tdevices = fortigate_manager.list_devices()\n\t\treturn json.dumps(devices, indent=2)\n\texcept Exception as e:\n\t\treturn f\"Errore: {str(e)}\"\n</code></pre>"},{"location":"policy/","title":"Policy","text":""},{"location":"policy/#mcptool.policy.fortigate_create_firewall_address","title":"<code>fortigate_create_firewall_address(device_id, name, type, subnet=None, start_ip=None, end_ip=None, fqdn=None, country=None, interface=None, comments=None, vdom='root')</code>","text":"<p>Create a new address object on FortiGate</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device identifier</p> required <code>name</code> <code>str</code> <p>Address object name</p> required <code>type</code> <code>str</code> <p>Address type (ipmask, iprange, fqdn, geography, interface-subnet)</p> required <code>subnet</code> <code>Optional[str]</code> <p>Subnet in CIDR format (for type=ipmask), e.g. \"192.168.1.0/24\"</p> <code>None</code> <code>start_ip</code> <code>Optional[str]</code> <p>Start IP address (for type=iprange)</p> <code>None</code> <code>end_ip</code> <code>Optional[str]</code> <p>End IP address (for type=iprange)</p> <code>None</code> <code>fqdn</code> <code>Optional[str]</code> <p>Fully qualified domain name (for type=fqdn)</p> <code>None</code> <code>country</code> <code>Optional[str]</code> <p>Country code (for type=geography)</p> <code>None</code> <code>interface</code> <code>Optional[str]</code> <p>Interface name (for type=interface-subnet)</p> <code>None</code> <code>comments</code> <code>Optional[str]</code> <p>Optional comments</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of address object creation</p> Source code in <code>mcptool/policy.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_firewall_address(device_id: str,\n    name: str,\n    type: str,\n    subnet: Optional[str] = None,\n    start_ip: Optional[str] = None,\n    end_ip: Optional[str] = None,\n    fqdn: Optional[str] = None,\n    country: Optional[str] = None,\n    interface: Optional[str] = None,\n    comments: Optional[str] = None,\n    vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create a new address object on FortiGate\n\n    Args:\n        device_id: Device identifier\n        name: Address object name\n        type: Address type (ipmask, iprange, fqdn, geography, interface-subnet)\n        subnet: Subnet in CIDR format (for type=ipmask), e.g. \"192.168.1.0/24\"\n        start_ip: Start IP address (for type=iprange)\n        end_ip: End IP address (for type=iprange)\n        fqdn: Fully qualified domain name (for type=fqdn)\n        country: Country code (for type=geography)\n        interface: Interface name (for type=interface-subnet)\n        comments: Optional comments\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of address object creation\n    \"\"\"\n    try:\n        # Prepare address object data\n        address_data = {\n            \"name\": name,\n            \"type\": type\n        }\n\n        # Add type-specific parameters\n        if type == \"ipmask\" and subnet:\n            address_data[\"subnet\"] = subnet\n        elif type == \"iprange\" and start_ip and end_ip:\n            address_data[\"start-ip\"] = start_ip\n            address_data[\"end-ip\"] = end_ip\n        elif type == \"fqdn\" and fqdn:\n            address_data[\"fqdn\"] = fqdn\n        elif type == \"geography\" and country:\n            address_data[\"country\"] = country\n        elif type == \"interface-subnet\" and interface:\n            address_data[\"interface\"] = interface\n        else:\n            return f\"Error: missing or invalid parameters for type '{type}'\"\n\n        # Add comments if specified\n        if comments:\n            address_data[\"comment\"] = comments\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_address_object(address_data)\n\n        return json.dumps(result, indent=2)\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"policy/#mcptool.policy.fortigate_create_firewall_policy","title":"<code>fortigate_create_firewall_policy(device_id, name, srcintf, dstintf, srcaddr, dstaddr, service, action, schedule='always', comments=None, logtraffic='utm', nat='disable', status='enable', users=None, groups=None, poolname=None, utm_status='disable', av_profile=None, webfilter_profile=None, dnsfilter_profile=None, application_list=None, ips_sensor=None, ssl_ssh_profile=None, vdom='root')</code>","text":"<p>Creates comprehensive firewall policy with all common fields</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Policy name</p> required <code>srcintf</code> <code>List[str]</code> <p>List of source interfaces</p> required <code>dstintf</code> <code>List[str]</code> <p>List of destination interfaces</p> required <code>srcaddr</code> <code>List[str]</code> <p>List of source addresses</p> required <code>dstaddr</code> <code>List[str]</code> <p>List of destination addresses</p> required <code>service</code> <code>List[str]</code> <p>List of services</p> required <code>action</code> <code>str</code> <p>Action to be performed (accept, deny)</p> required <code>schedule</code> <code>str</code> <p>Schedule (default: always)</p> <code>'always'</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>logtraffic</code> <code>str</code> <p>Log traffic setting (disable, all, utm) (default: utm)</p> <code>'utm'</code> <code>nat</code> <code>str</code> <p>NAT setting (enable, disable) (default: disable)</p> <code>'disable'</code> <code>status</code> <code>str</code> <p>Policy status (enable, disable) (default: enable)</p> <code>'enable'</code> <code>users</code> <code>Optional[List[str]]</code> <p>List of users (optional)</p> <code>None</code> <code>groups</code> <code>Optional[List[str]]</code> <p>List of user groups (optional)</p> <code>None</code> <code>poolname</code> <code>Optional[str]</code> <p>NAT pool name (optional)</p> <code>None</code> <code>utm_status</code> <code>str</code> <p>UTM status (enable, disable) (default: disable)</p> <code>'disable'</code> <code>av_profile</code> <code>Optional[str]</code> <p>Antivirus profile name (optional)</p> <code>None</code> <code>webfilter_profile</code> <code>Optional[str]</code> <p>Web filter profile name (optional)</p> <code>None</code> <code>dnsfilter_profile</code> <code>Optional[str]</code> <p>DNS filter profile name (optional)</p> <code>None</code> <code>application_list</code> <code>Optional[str]</code> <p>Application control list name (optional)</p> <code>None</code> <code>ips_sensor</code> <code>Optional[str]</code> <p>IPS sensor name (optional)</p> <code>None</code> <code>ssl_ssh_profile</code> <code>Optional[str]</code> <p>SSL/SSH inspection profile name (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Resulting firewall policy</p> Source code in <code>mcptool/policy.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_firewall_policy(device_id: str, name: str,\n                                    srcintf: List[str], dstintf: List[str],\n                                    srcaddr: List[str], dstaddr: List[str], service: List[str],\n                                    action: str, schedule: str = \"always\",\n                                    comments: Optional[str] = None, \n                                    logtraffic: str = \"utm\",\n                                    nat: str = \"disable\",\n                                    status: str = \"enable\",\n                                    users: Optional[List[str]] = None,\n                                    groups: Optional[List[str]] = None,\n                                    poolname: Optional[str] = None,\n                                    utm_status: str = \"disable\",\n                                    av_profile: Optional[str] = None,\n                                    webfilter_profile: Optional[str] = None,\n                                    dnsfilter_profile: Optional[str] = None,\n                                    application_list: Optional[str] = None,\n                                    ips_sensor: Optional[str] = None,\n                                    ssl_ssh_profile: Optional[str] = None,\n                                    vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Creates comprehensive firewall policy with all common fields\n\n    Args:\n        device_id: Device ID\n        name: Policy name\n        srcintf: List of source interfaces\n        dstintf: List of destination interfaces\n        srcaddr: List of source addresses\n        dstaddr: List of destination addresses\n        service: List of services\n        action: Action to be performed (accept, deny)\n        schedule: Schedule (default: always)\n        comments: Comments (optional)\n        logtraffic: Log traffic setting (disable, all, utm) (default: utm)\n        nat: NAT setting (enable, disable) (default: disable)\n        status: Policy status (enable, disable) (default: enable)\n        users: List of users (optional)\n        groups: List of user groups (optional)\n        poolname: NAT pool name (optional)\n        utm_status: UTM status (enable, disable) (default: disable)\n        av_profile: Antivirus profile name (optional)\n        webfilter_profile: Web filter profile name (optional)\n        dnsfilter_profile: DNS filter profile name (optional)\n        application_list: Application control list name (optional)\n        ips_sensor: IPS sensor name (optional)\n        ssl_ssh_profile: SSL/SSH inspection profile name (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Resulting firewall policy\n    \"\"\"\n    try:\n        # Prepare policy data\n        policy_data = {\n            \"name\": name,\n            \"srcintf\": [{\"name\": intf} for intf in srcintf],\n            \"dstintf\": [{\"name\": intf} for intf in dstintf],\n            \"srcaddr\": [{\"name\": addr} for addr in srcaddr],\n            \"dstaddr\": [{\"name\": addr} for addr in dstaddr],\n            \"service\": [{\"name\": svc} for svc in service],\n            \"action\": action,\n            \"status\": status,\n            \"schedule\": schedule,\n            \"logtraffic\": logtraffic,\n            \"nat\": nat,\n            \"utm-status\": utm_status\n        }\n\n        # Add optional fields\n        if comments:\n            policy_data[\"comments\"] = comments\n        if users:\n            policy_data[\"users\"] = [{\"name\": user} for user in users]\n        if groups:\n            policy_data[\"groups\"] = [{\"name\": group} for group in groups]\n        if poolname:\n            policy_data[\"poolname\"] = poolname\n        if av_profile:\n            policy_data[\"av-profile\"] = av_profile\n        if webfilter_profile:\n            policy_data[\"webfilter-profile\"] = webfilter_profile\n        if dnsfilter_profile:\n            policy_data[\"dnsfilter-profile\"] = dnsfilter_profile\n        if application_list:\n            policy_data[\"application-list\"] = application_list\n        if ips_sensor:\n            policy_data[\"ips-sensor\"] = ips_sensor\n        if ssl_ssh_profile:\n            policy_data[\"ssl-ssh-profile\"] = ssl_ssh_profile\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_firewall_policy(policy_data=policy_data, vdom=vdom)\n        return json.dumps(result, indent=2)\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"policy/#mcptool.policy.fortigate_delete_firewall_policy","title":"<code>fortigate_delete_firewall_policy(device_id, policy_id, vdom='root')</code>","text":"<p>Deletes firewall policy</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>policy_id</code> <code>int</code> <p>Policy ID to be deleted</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> Source code in <code>mcptool/policy.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_firewall_policy(device_id: str, policy_id: int, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Deletes firewall policy\n\n    Args:\n        device_id: Device ID\n        policy_id: Policy ID to be deleted\n        vdom: Target VDOM (default: root)\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_firewall_policy(policy_id, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"policy/#mcptool.policy.fortigate_delete_vip_object","title":"<code>fortigate_delete_vip_object(device_id, vip_name, vdom='root')</code>","text":"<p>Deletes vip object by name</p> Source code in <code>mcptool/policy.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_vip_object(device_id: str, vip_name: str, vdom: str = \"root\") -&gt; str:\n    \"\"\" Deletes vip object by name\"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_vip_address(vip_name, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"policy/#mcptool.policy.fortigate_get_firewall_policies","title":"<code>fortigate_get_firewall_policies(device_id, vdom='root')</code>","text":"<p>Gets list of firewall policies</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> Source code in <code>mcptool/policy.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_firewall_policies(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Gets list of firewall policies\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        policies = api.get_firewall_policies(vdom)\n        return json.dumps(policies, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"policy/#mcptool.policy.fortigate_get_policy_by_id","title":"<code>fortigate_get_policy_by_id(device_id, policy_id, vdom='root')</code>","text":"<p>Gets specific firewall policy by ID</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>policy_id</code> <code>int</code> <p>Policy ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> Source code in <code>mcptool/policy.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_policy_by_id(device_id: str, policy_id: int, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Gets specific firewall policy by ID\n\n    Args:\n        device_id: Device ID\n        policy_id: Policy ID\n        vdom: Target VDOM (default: root)\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        policy = api.get_policy_by_id(policy_id, vdom)\n        return json.dumps(policy, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"policy/#mcptool.policy.fortigate_get_policy_statistics","title":"<code>fortigate_get_policy_statistics(device_id, vdom='root')</code>","text":"<p>Get statistics and summary of firewall policies</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Policy statistics including counts by action, status, and other metrics</p> Source code in <code>mcptool/policy.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_policy_statistics(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get statistics and summary of firewall policies\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Policy statistics including counts by action, status, and other metrics\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        policies = api.get_firewall_policies(vdom)\n\n        # Calculate statistics\n        stats = {\n            \"total_policies\": len(policies),\n            \"by_action\": {},\n            \"by_status\": {},\n            \"by_nat\": {},\n            \"by_logtraffic\": {},\n            \"with_utm\": 0,\n            \"with_users\": 0,\n            \"with_comments\": 0\n        }\n\n        for policy in policies:\n            # Count by action\n            action = policy.get('action', 'unknown')\n            stats[\"by_action\"][action] = stats[\"by_action\"].get(action, 0) + 1\n\n            # Count by status\n            status = policy.get('status', 'unknown')\n            stats[\"by_status\"][status] = stats[\"by_status\"].get(status, 0) + 1\n\n            # Count by NAT\n            nat = policy.get('nat', 'unknown')\n            stats[\"by_nat\"][nat] = stats[\"by_nat\"].get(nat, 0) + 1\n\n            # Count by log traffic\n            logtraffic = policy.get('logtraffic', 'unknown')\n            stats[\"by_logtraffic\"][logtraffic] = stats[\"by_logtraffic\"].get(logtraffic, 0) + 1\n\n            # Count UTM enabled policies\n            if policy.get('utm-status') == 'enable':\n                stats[\"with_utm\"] += 1\n\n            # Count policies with users\n            if policy.get('users') or policy.get('groups'):\n                stats[\"with_users\"] += 1\n\n            # Count policies with comments\n            if policy.get('comments'):\n                stats[\"with_comments\"] += 1\n\n        return json.dumps(stats, indent=2)\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"policy/#mcptool.policy.fortigate_get_vip_objects","title":"<code>fortigate_get_vip_objects(device_id, vdom='root')</code>","text":"<p>Gets configured vip objects</p> Source code in <code>mcptool/policy.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_vip_objects(device_id: str,vdom: str = \"root\") -&gt; str:\n    \"\"\"Gets configured vip objects \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        policies = api.get_vip_addresses(vdom)\n        return json.dumps(policies, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"policy/#mcptool.policy.fortigate_search_firewall_policies","title":"<code>fortigate_search_firewall_policies(device_id, name_filter=None, action_filter=None, status_filter=None, srcaddr_filter=None, dstaddr_filter=None, service_filter=None, vdom='root')</code>","text":"<p>Search and filter firewall policies based on various criteria</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name_filter</code> <code>Optional[str]</code> <p>Filter by policy name (partial match)</p> <code>None</code> <code>action_filter</code> <code>Optional[str]</code> <p>Filter by action (accept, deny)</p> <code>None</code> <code>status_filter</code> <code>Optional[str]</code> <p>Filter by status (enable, disable)</p> <code>None</code> <code>srcaddr_filter</code> <code>Optional[str]</code> <p>Filter by source address (partial match)</p> <code>None</code> <code>dstaddr_filter</code> <code>Optional[str]</code> <p>Filter by destination address (partial match)</p> <code>None</code> <code>service_filter</code> <code>Optional[str]</code> <p>Filter by service (partial match)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Filtered list of firewall policies</p> Source code in <code>mcptool/policy.py</code> <pre><code>@mcp.tool()\ndef fortigate_search_firewall_policies(device_id: str, \n                                     name_filter: Optional[str] = None,\n                                     action_filter: Optional[str] = None,\n                                     status_filter: Optional[str] = None,\n                                     srcaddr_filter: Optional[str] = None,\n                                     dstaddr_filter: Optional[str] = None,\n                                     service_filter: Optional[str] = None,\n                                     vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Search and filter firewall policies based on various criteria\n\n    Args:\n        device_id: Device ID\n        name_filter: Filter by policy name (partial match)\n        action_filter: Filter by action (accept, deny)\n        status_filter: Filter by status (enable, disable)\n        srcaddr_filter: Filter by source address (partial match)\n        dstaddr_filter: Filter by destination address (partial match)\n        service_filter: Filter by service (partial match)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Filtered list of firewall policies\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        policies = api.get_firewall_policies(vdom)\n\n        # Apply filters\n        filtered_policies = []\n        for policy in policies:\n            # Apply name filter\n            if name_filter and name_filter.lower() not in policy.get('name', '').lower():\n                continue\n\n            # Apply action filter\n            if action_filter and policy.get('action') != action_filter:\n                continue\n\n            # Apply status filter\n            if status_filter and policy.get('status') != status_filter:\n                continue\n\n            # Apply source address filter\n            if srcaddr_filter:\n                srcaddr_names = [addr.get('name', '') for addr in policy.get('srcaddr', [])]\n                if not any(srcaddr_filter.lower() in name.lower() for name in srcaddr_names):\n                    continue\n\n            # Apply destination address filter\n            if dstaddr_filter:\n                dstaddr_names = [addr.get('name', '') for addr in policy.get('dstaddr', [])]\n                if not any(dstaddr_filter.lower() in name.lower() for name in dstaddr_names):\n                    continue\n\n            # Apply service filter\n            if service_filter:\n                service_names = [svc.get('name', '') for svc in policy.get('service', [])]\n                if not any(service_filter.lower() in name.lower() for name in service_names):\n                    continue\n\n            filtered_policies.append(policy)\n\n        return json.dumps({\n            \"total_policies\": len(policies),\n            \"filtered_policies\": len(filtered_policies),\n            \"policies\": filtered_policies\n        }, indent=2)\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"policy/#mcptool.policy.fortigate_update_firewall_policy","title":"<code>fortigate_update_firewall_policy(device_id, policy_id, name=None, srcintf=None, dstintf=None, srcaddr=None, dstaddr=None, service=None, action=None, schedule=None, comments=None, status=None, vdom='root')</code>","text":"<p>Updates existing firewall policy</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>policy_id</code> <code>int</code> <p>Policy ID to update</p> required <code>name</code> <code>Optional[str]</code> <p>Policy name (optional)</p> <code>None</code> <code>srcintf</code> <code>Optional[List[str]]</code> <p>List of source interfaces (optional)</p> <code>None</code> <code>dstintf</code> <code>Optional[List[str]]</code> <p>List of destination interfaces (optional)</p> <code>None</code> <code>srcaddr</code> <code>Optional[List[str]]</code> <p>List of source addresses (optional)</p> <code>None</code> <code>dstaddr</code> <code>Optional[List[str]]</code> <p>List of destination addresses (optional)</p> <code>None</code> <code>service</code> <code>Optional[List[str]]</code> <p>List of services (optional)</p> <code>None</code> <code>action</code> <code>Optional[str]</code> <p>Action to be performed (accept, deny) (optional)</p> <code>None</code> <code>schedule</code> <code>Optional[str]</code> <p>Schedule (optional)</p> <code>None</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>status</code> <code>Optional[str]</code> <p>Policy status (enable, disable) (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Updated firewall policy result</p> Source code in <code>mcptool/policy.py</code> <pre><code>@mcp.tool()\ndef fortigate_update_firewall_policy(device_id: str, policy_id: int, \n                                   name: Optional[str] = None,\n                                   srcintf: Optional[List[str]] = None, \n                                   dstintf: Optional[List[str]] = None,\n                                   srcaddr: Optional[List[str]] = None, \n                                   dstaddr: Optional[List[str]] = None, \n                                   service: Optional[List[str]] = None,\n                                   action: Optional[str] = None, \n                                   schedule: Optional[str] = None,\n                                   comments: Optional[str] = None, \n                                   status: Optional[str] = None,\n                                   vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Updates existing firewall policy\n\n    Args:\n        device_id: Device ID\n        policy_id: Policy ID to update\n        name: Policy name (optional)\n        srcintf: List of source interfaces (optional)\n        dstintf: List of destination interfaces (optional)\n        srcaddr: List of source addresses (optional)\n        dstaddr: List of destination addresses (optional)\n        service: List of services (optional)\n        action: Action to be performed (accept, deny) (optional)\n        schedule: Schedule (optional)\n        comments: Comments (optional)\n        status: Policy status (enable, disable) (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Updated firewall policy result\n    \"\"\"\n    try:\n        # Build update data with only provided fields\n        policy_data = {}\n\n        if name is not None:\n            policy_data[\"name\"] = name\n        if srcintf is not None:\n            policy_data[\"srcintf\"] = [{\"name\": intf} for intf in srcintf]\n        if dstintf is not None:\n            policy_data[\"dstintf\"] = [{\"name\": intf} for intf in dstintf]\n        if srcaddr is not None:\n            policy_data[\"srcaddr\"] = [{\"name\": addr} for addr in srcaddr]\n        if dstaddr is not None:\n            policy_data[\"dstaddr\"] = [{\"name\": addr} for addr in dstaddr]\n        if service is not None:\n            policy_data[\"service\"] = [{\"name\": svc} for svc in service]\n        if action is not None:\n            policy_data[\"action\"] = action\n        if schedule is not None:\n            policy_data[\"schedule\"] = schedule\n        if comments is not None:\n            policy_data[\"comments\"] = comments\n        if status is not None:\n            policy_data[\"status\"] = status\n\n        if not policy_data:\n            return \"Error: No fields provided to update\"\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.update_firewall_policy(policy_id, policy_data, vdom)\n        return json.dumps(result, indent=2)\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"policy/#mcptool.policy.fortigate_validate_firewall_policy","title":"<code>fortigate_validate_firewall_policy(device_id, srcintf, source_ip, protocol, dest, source_port=0, dest_port=0, vdom='root')</code>","text":"<p>Validates firewall policy by simulating packet flow and checking which policy would match</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>srcintf</code> <code>str</code> <p>Source interface name</p> required <code>source_ip</code> <code>str</code> <p>Source IP address</p> required <code>protocol</code> <code>str</code> <p>Protocol (tcp, udp, icmp, etc.)</p> required <code>dest</code> <code>str</code> <p>Destination IP address</p> required <code>source_port</code> <code>int</code> <p>Source port number (default: 0)</p> <code>0</code> <code>dest_port</code> <code>int</code> <p>Destination port number (default: 0)</p> <code>0</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Policy lookup result showing which policy would match this traffic</p> Source code in <code>mcptool/policy.py</code> <pre><code>@mcp.tool()\ndef fortigate_validate_firewall_policy(device_id: str, srcintf: str, source_ip: str, \n                                     protocol: str, dest: str, source_port: int = 0, \n                                     dest_port: int = 0, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Validates firewall policy by simulating packet flow and checking which policy would match\n\n    Args:\n        device_id: Device ID\n        srcintf: Source interface name\n        source_ip: Source IP address\n        protocol: Protocol (tcp, udp, icmp, etc.)\n        dest: Destination IP address\n        source_port: Source port number (default: 0)\n        dest_port: Destination port number (default: 0)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Policy lookup result showing which policy would match this traffic\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.lookup_firewall_policy(\n            srcintf=srcintf,\n            source_ip=source_ip,\n            protocol=protocol,\n            dest=dest,\n            source_port=source_port,\n            dest_port=dest_port,\n            vdom=vdom\n        )\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"routing/","title":"Routing","text":""},{"location":"routing/#mcptool.routing.fortigate_get_bgp_peers","title":"<code>fortigate_get_bgp_peers(device_id, vdom='root')</code>","text":"<p>Get configured BGP peers</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> Source code in <code>mcptool/routing.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_bgp_peers(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get configured BGP peers\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        routes = api.get_bgp_peers(vdom)\n        return json.dumps(routes, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"routing/#mcptool.routing.fortigate_get_routing_table","title":"<code>fortigate_get_routing_table(device_id, vdom='root')</code>","text":"<p>Gets configured routing table</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> Source code in <code>mcptool/routing.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_routing_table(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Gets configured routing table\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        routes = api.get_routing_table(vdom)\n        return json.dumps(routes, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"routing/#mcptool.routing.fortigate_get_static_routes","title":"<code>fortigate_get_static_routes(device_id, vdom='root')</code>","text":"<p>Gets configured static routes</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> Source code in <code>mcptool/routing.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_static_routes(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Gets configured static routes\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        routes = api.get_static_routes(vdom)\n        return json.dumps(routes, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/","title":"Security","text":""},{"location":"security/#mcptool.security.fortigate_create_av_profile","title":"<code>fortigate_create_av_profile(device_id, name, inspection_mode='proxy', http_scan='enable', ftp_scan='enable', imap_scan='enable', pop3_scan='enable', smtp_scan='enable', mapi_scan='enable', nntp_scan='enable', comments=None, vdom='root')</code>","text":"<p>Create antivirus profile</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Profile name</p> required <code>inspection_mode</code> <code>str</code> <p>Inspection mode (proxy, flow-based)</p> <code>'proxy'</code> <code>http_scan</code> <code>str</code> <p>HTTP scanning (enable, disable)</p> <code>'enable'</code> <code>ftp_scan</code> <code>str</code> <p>FTP scanning (enable, disable)</p> <code>'enable'</code> <code>imap_scan</code> <code>str</code> <p>IMAP scanning (enable, disable)</p> <code>'enable'</code> <code>pop3_scan</code> <code>str</code> <p>POP3 scanning (enable, disable)</p> <code>'enable'</code> <code>smtp_scan</code> <code>str</code> <p>SMTP scanning (enable, disable)</p> <code>'enable'</code> <code>mapi_scan</code> <code>str</code> <p>MAPI scanning (enable, disable)</p> <code>'enable'</code> <code>nntp_scan</code> <code>str</code> <p>NNTP scanning (enable, disable)</p> <code>'enable'</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of profile creation</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_av_profile(device_id: str, name: str, \n                               inspection_mode: str = \"proxy\",\n                               http_scan: str = \"enable\",\n                               ftp_scan: str = \"enable\", \n                               imap_scan: str = \"enable\",\n                               pop3_scan: str = \"enable\",\n                               smtp_scan: str = \"enable\",\n                               mapi_scan: str = \"enable\",\n                               nntp_scan: str = \"enable\",\n                               comments: Optional[str] = None,\n                               vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create antivirus profile\n\n    Args:\n        device_id: Device ID\n        name: Profile name\n        inspection_mode: Inspection mode (proxy, flow-based)\n        http_scan: HTTP scanning (enable, disable)\n        ftp_scan: FTP scanning (enable, disable)\n        imap_scan: IMAP scanning (enable, disable)\n        pop3_scan: POP3 scanning (enable, disable)\n        smtp_scan: SMTP scanning (enable, disable)\n        mapi_scan: MAPI scanning (enable, disable)\n        nntp_scan: NNTP scanning (enable, disable)\n        comments: Comments (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of profile creation\n    \"\"\"\n    try:\n        profile_data = {\n            \"name\": name,\n            \"inspection-mode\": inspection_mode,\n            \"http\": {\"scan\": http_scan},\n            \"ftp\": {\"scan\": ftp_scan},\n            \"imap\": {\"scan\": imap_scan},\n            \"pop3\": {\"scan\": pop3_scan},\n            \"smtp\": {\"scan\": smtp_scan},\n            \"mapi\": {\"scan\": mapi_scan},\n            \"nntp\": {\"scan\": nntp_scan}\n        }\n\n        if comments:\n            profile_data[\"comment\"] = comments\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_av_profile(profile_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_create_dnsfilter_profile","title":"<code>fortigate_create_dnsfilter_profile(device_id, name, block_action='block', log_all_domain='disable', safe_search='disable', youtube_restrict='none', comments=None, vdom='root')</code>","text":"<p>Create DNS filter profile</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Profile name</p> required <code>block_action</code> <code>str</code> <p>Block action (block, redirect)</p> <code>'block'</code> <code>log_all_domain</code> <code>str</code> <p>Log all domains (enable, disable)</p> <code>'disable'</code> <code>safe_search</code> <code>str</code> <p>Safe search (enable, disable)</p> <code>'disable'</code> <code>youtube_restrict</code> <code>str</code> <p>YouTube restriction (none, strict, moderate)</p> <code>'none'</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of profile creation</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_dnsfilter_profile(device_id: str, name: str,\n                                     block_action: str = \"block\",\n                                     log_all_domain: str = \"disable\",\n                                     safe_search: str = \"disable\",\n                                     youtube_restrict: str = \"none\",\n                                     comments: Optional[str] = None,\n                                     vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create DNS filter profile\n\n    Args:\n        device_id: Device ID\n        name: Profile name\n        block_action: Block action (block, redirect)\n        log_all_domain: Log all domains (enable, disable)\n        safe_search: Safe search (enable, disable)\n        youtube_restrict: YouTube restriction (none, strict, moderate)\n        comments: Comments (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of profile creation\n    \"\"\"\n    try:\n        profile_data = {\n            \"name\": name,\n            \"block-action\": block_action,\n            \"log-all-domain\": log_all_domain,\n            \"safe-search\": safe_search,\n            \"youtube-restrict\": youtube_restrict\n        }\n\n        if comments:\n            profile_data[\"comment\"] = comments\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_dnsfilter_profile(profile_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_create_ips_sensor","title":"<code>fortigate_create_ips_sensor(device_id, name, block_malicious_url='enable', scan_botnet_connections='enable', extended_log='disable', comments=None, vdom='root')</code>","text":"<p>Create IPS sensor</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Sensor name</p> required <code>block_malicious_url</code> <code>str</code> <p>Block malicious URLs (enable, disable)</p> <code>'enable'</code> <code>scan_botnet_connections</code> <code>str</code> <p>Scan botnet connections (enable, disable)</p> <code>'enable'</code> <code>extended_log</code> <code>str</code> <p>Extended logging (enable, disable)</p> <code>'disable'</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of sensor creation</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_ips_sensor(device_id: str, name: str,\n                              block_malicious_url: str = \"enable\",\n                              scan_botnet_connections: str = \"enable\", \n                              extended_log: str = \"disable\",\n                              comments: Optional[str] = None,\n                              vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create IPS sensor\n\n    Args:\n        device_id: Device ID\n        name: Sensor name\n        block_malicious_url: Block malicious URLs (enable, disable)\n        scan_botnet_connections: Scan botnet connections (enable, disable)\n        extended_log: Extended logging (enable, disable)\n        comments: Comments (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of sensor creation\n    \"\"\"\n    try:\n        sensor_data = {\n            \"name\": name,\n            \"block-malicious-url\": block_malicious_url,\n            \"scan-botnet-connections\": scan_botnet_connections,\n            \"extended-log\": extended_log\n        }\n\n        if comments:\n            sensor_data[\"comment\"] = comments\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_ips_sensor(sensor_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_create_ssl_ssh_profile","title":"<code>fortigate_create_ssl_ssh_profile(device_id, name, ssl_inspect_all='disable', https_inspection='disable', ftps_inspection='disable', imaps_inspection='disable', pop3s_inspection='disable', smtps_inspection='disable', ssh_inspection='disable', comments=None, vdom='root')</code>","text":"<p>Create SSL/SSH inspection profile</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Profile name</p> required <code>ssl_inspect_all</code> <code>str</code> <p>Inspect all SSL (enable, disable)</p> <code>'disable'</code> <code>https_inspection</code> <code>str</code> <p>HTTPS inspection (enable, disable)</p> <code>'disable'</code> <code>ftps_inspection</code> <code>str</code> <p>FTPS inspection (enable, disable)</p> <code>'disable'</code> <code>imaps_inspection</code> <code>str</code> <p>IMAPS inspection (enable, disable)</p> <code>'disable'</code> <code>pop3s_inspection</code> <code>str</code> <p>POP3S inspection (enable, disable)</p> <code>'disable'</code> <code>smtps_inspection</code> <code>str</code> <p>SMTPS inspection (enable, disable)</p> <code>'disable'</code> <code>ssh_inspection</code> <code>str</code> <p>SSH inspection (enable, disable)</p> <code>'disable'</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of profile creation</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_ssl_ssh_profile(device_id: str, name: str,\n                                   ssl_inspect_all: str = \"disable\",\n                                   https_inspection: str = \"disable\",\n                                   ftps_inspection: str = \"disable\",\n                                   imaps_inspection: str = \"disable\",\n                                   pop3s_inspection: str = \"disable\",\n                                   smtps_inspection: str = \"disable\",\n                                   ssh_inspection: str = \"disable\",\n                                   comments: Optional[str] = None,\n                                   vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create SSL/SSH inspection profile\n\n    Args:\n        device_id: Device ID\n        name: Profile name\n        ssl_inspect_all: Inspect all SSL (enable, disable)\n        https_inspection: HTTPS inspection (enable, disable)\n        ftps_inspection: FTPS inspection (enable, disable)\n        imaps_inspection: IMAPS inspection (enable, disable)\n        pop3s_inspection: POP3S inspection (enable, disable)\n        smtps_inspection: SMTPS inspection (enable, disable)\n        ssh_inspection: SSH inspection (enable, disable)\n        comments: Comments (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of profile creation\n    \"\"\"\n    try:\n        profile_data = {\n            \"name\": name,\n            \"ssl\": {\n                \"inspect-all\": ssl_inspect_all\n            },\n            \"https\": {\n                \"status\": https_inspection\n            },\n            \"ftps\": {\n                \"status\": ftps_inspection\n            },\n            \"imaps\": {\n                \"status\": imaps_inspection\n            },\n            \"pop3s\": {\n                \"status\": pop3s_inspection\n            },\n            \"smtps\": {\n                \"status\": smtps_inspection\n            },\n            \"ssh\": {\n                \"status\": ssh_inspection\n            }\n        }\n\n        if comments:\n            profile_data[\"comment\"] = comments\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_ssl_ssh_profile(profile_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_create_webfilter_profile","title":"<code>fortigate_create_webfilter_profile(device_id, name, inspection_mode='proxy', https_replacemsg='enable', log_all_url='disable', web_flow_log_encoding='utf-8', safe_search='disable', youtube_restrict='none', comments=None, vdom='root')</code>","text":"<p>Create web filter profile</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Profile name</p> required <code>inspection_mode</code> <code>str</code> <p>Inspection mode (proxy, flow-based)</p> <code>'proxy'</code> <code>https_replacemsg</code> <code>str</code> <p>HTTPS replacement message (enable, disable)</p> <code>'enable'</code> <code>log_all_url</code> <code>str</code> <p>Log all URLs (enable, disable)</p> <code>'disable'</code> <code>web_flow_log_encoding</code> <code>str</code> <p>Web flow log encoding</p> <code>'utf-8'</code> <code>safe_search</code> <code>str</code> <p>Safe search (enable, disable)</p> <code>'disable'</code> <code>youtube_restrict</code> <code>str</code> <p>YouTube restriction (none, strict, moderate)</p> <code>'none'</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of profile creation</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_webfilter_profile(device_id: str, name: str,\n                                     inspection_mode: str = \"proxy\",\n                                     https_replacemsg: str = \"enable\",\n                                     log_all_url: str = \"disable\",\n                                     web_flow_log_encoding: str = \"utf-8\",\n                                     safe_search: str = \"disable\",\n                                     youtube_restrict: str = \"none\",\n                                     comments: Optional[str] = None,\n                                     vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create web filter profile\n\n    Args:\n        device_id: Device ID\n        name: Profile name\n        inspection_mode: Inspection mode (proxy, flow-based)\n        https_replacemsg: HTTPS replacement message (enable, disable)\n        log_all_url: Log all URLs (enable, disable)\n        web_flow_log_encoding: Web flow log encoding\n        safe_search: Safe search (enable, disable)\n        youtube_restrict: YouTube restriction (none, strict, moderate)\n        comments: Comments (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of profile creation\n    \"\"\"\n    try:\n        profile_data = {\n            \"name\": name,\n            \"inspection-mode\": inspection_mode,\n            \"https-replacemsg\": https_replacemsg,\n            \"log-all-url\": log_all_url,\n            \"web-flow-log-encoding\": web_flow_log_encoding,\n            \"safe-search\": safe_search,\n            \"youtube-restrict\": youtube_restrict\n        }\n\n        if comments:\n            profile_data[\"comment\"] = comments\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_webfilter_profile(profile_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_delete_av_profile","title":"<code>fortigate_delete_av_profile(device_id, profile_name, vdom='root')</code>","text":"<p>Delete antivirus profile</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>profile_name</code> <code>str</code> <p>Profile name to delete</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of profile deletion</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_av_profile(device_id: str, profile_name: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Delete antivirus profile\n\n    Args:\n        device_id: Device ID\n        profile_name: Profile name to delete\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of profile deletion\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_av_profile(profile_name, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_delete_dnsfilter_profile","title":"<code>fortigate_delete_dnsfilter_profile(device_id, profile_name, vdom='root')</code>","text":"<p>Delete DNS filter profile</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>profile_name</code> <code>str</code> <p>Profile name to delete</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of profile deletion</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_dnsfilter_profile(device_id: str, profile_name: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Delete DNS filter profile\n\n    Args:\n        device_id: Device ID\n        profile_name: Profile name to delete\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of profile deletion\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_dnsfilter_profile(profile_name, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_delete_ips_sensor","title":"<code>fortigate_delete_ips_sensor(device_id, sensor_name, vdom='root')</code>","text":"<p>Delete IPS sensor</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>sensor_name</code> <code>str</code> <p>Sensor name to delete</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of sensor deletion</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_ips_sensor(device_id: str, sensor_name: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Delete IPS sensor\n\n    Args:\n        device_id: Device ID\n        sensor_name: Sensor name to delete\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of sensor deletion\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_ips_sensor(sensor_name, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_delete_ssl_ssh_profile","title":"<code>fortigate_delete_ssl_ssh_profile(device_id, profile_name, vdom='root')</code>","text":"<p>Delete SSL/SSH inspection profile</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>profile_name</code> <code>str</code> <p>Profile name to delete</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of profile deletion</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_ssl_ssh_profile(device_id: str, profile_name: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Delete SSL/SSH inspection profile\n\n    Args:\n        device_id: Device ID\n        profile_name: Profile name to delete\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of profile deletion\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_ssl_ssh_profile(profile_name, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_delete_webfilter_profile","title":"<code>fortigate_delete_webfilter_profile(device_id, profile_name, vdom='root')</code>","text":"<p>Delete web filter profile</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>profile_name</code> <code>str</code> <p>Profile name to delete</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of profile deletion</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_webfilter_profile(device_id: str, profile_name: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Delete web filter profile\n\n    Args:\n        device_id: Device ID\n        profile_name: Profile name to delete\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of profile deletion\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_webfilter_profile(profile_name, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_get_av_profiles","title":"<code>fortigate_get_av_profiles(device_id, vdom='root')</code>","text":"<p>Get all antivirus profiles</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of antivirus profiles</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_av_profiles(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get all antivirus profiles\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of antivirus profiles\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        profiles = api.get_av_profiles(vdom)\n        return json.dumps(profiles, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_get_dnsfilter_profiles","title":"<code>fortigate_get_dnsfilter_profiles(device_id, vdom='root')</code>","text":"<p>Get all DNS filter profiles</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of DNS filter profiles</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_dnsfilter_profiles(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get all DNS filter profiles\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of DNS filter profiles\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        profiles = api.get_dnsfilter_profiles(vdom)\n        return json.dumps(profiles, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_get_ips_sensors","title":"<code>fortigate_get_ips_sensors(device_id, vdom='root')</code>","text":"<p>Get all IPS sensors</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of IPS sensors</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_ips_sensors(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get all IPS sensors\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of IPS sensors\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        sensors = api.get_ips_sensors(vdom)\n        return json.dumps(sensors, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_get_ssl_ssh_profiles","title":"<code>fortigate_get_ssl_ssh_profiles(device_id, vdom='root')</code>","text":"<p>Get all SSL/SSH inspection profiles</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of SSL/SSH inspection profiles</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_ssl_ssh_profiles(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get all SSL/SSH inspection profiles\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of SSL/SSH inspection profiles\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        profiles = api.get_ssl_ssh_profiles(vdom)\n        return json.dumps(profiles, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"security/#mcptool.security.fortigate_get_webfilter_profiles","title":"<code>fortigate_get_webfilter_profiles(device_id, vdom='root')</code>","text":"<p>Get all web filter profiles</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of web filter profiles</p> Source code in <code>mcptool/security.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_webfilter_profiles(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get all web filter profiles\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of web filter profiles\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        profiles = api.get_webfilter_profiles(vdom)\n        return json.dumps(profiles, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"sysadmin/","title":"Sysadmin","text":""},{"location":"sysadmin/#mcptool.sysadmin.fortigate_backup_config","title":"<code>fortigate_backup_config(device_id, scope='global')</code>","text":"<p>Backup FortiGate configuration</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>scope</code> <code>str</code> <p>Backup scope (global, vdom)</p> <code>'global'</code> <p>Returns:</p> Type Description <code>str</code> <p>Configuration backup data</p> Source code in <code>mcptool/sysadmin.py</code> <pre><code>@mcp.tool()\ndef fortigate_backup_config(device_id: str, scope: str = \"global\") -&gt; str:\n    \"\"\"\n    Backup FortiGate configuration\n\n    Args:\n        device_id: Device ID\n        scope: Backup scope (global, vdom)\n\n    Returns:\n        Configuration backup data\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        backup = api.backup_config(scope)\n        return json.dumps(backup, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"sysadmin/#mcptool.sysadmin.fortigate_get_bandwidth_usage","title":"<code>fortigate_get_bandwidth_usage(device_id, vdom='root')</code>","text":"<p>Get bandwidth usage statistics</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Bandwidth usage statistics by interface</p> Source code in <code>mcptool/sysadmin.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_bandwidth_usage(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get bandwidth usage statistics\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Bandwidth usage statistics by interface\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        bandwidth = api.get_bandwidth_usage(vdom)\n        return json.dumps(bandwidth, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"sysadmin/#mcptool.sysadmin.fortigate_get_disk_usage","title":"<code>fortigate_get_disk_usage(device_id)</code>","text":"<p>Get disk usage information</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <p>Returns:</p> Type Description <code>str</code> <p>Disk usage statistics</p> Source code in <code>mcptool/sysadmin.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_disk_usage(device_id: str) -&gt; str:\n    \"\"\"\n    Get disk usage information\n\n    Args:\n        device_id: Device ID\n\n    Returns:\n        Disk usage statistics\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        disk_usage = api.get_disk_usage()\n        return json.dumps(disk_usage, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"sysadmin/#mcptool.sysadmin.fortigate_get_firmware_info","title":"<code>fortigate_get_firmware_info(device_id)</code>","text":"<p>Get firmware information</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <p>Returns:</p> Type Description <code>str</code> <p>Current firmware version and build information</p> Source code in <code>mcptool/sysadmin.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_firmware_info(device_id: str) -&gt; str:\n    \"\"\"\n    Get firmware information\n\n    Args:\n        device_id: Device ID\n\n    Returns:\n        Current firmware version and build information\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        firmware_info = api.get_firmware_info()\n        return json.dumps(firmware_info, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"sysadmin/#mcptool.sysadmin.fortigate_get_license_info","title":"<code>fortigate_get_license_info(device_id)</code>","text":"<p>Get license information</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <p>Returns:</p> Type Description <code>str</code> <p>License status and details</p> Source code in <code>mcptool/sysadmin.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_license_info(device_id: str) -&gt; str:\n    \"\"\"\n    Get license information\n\n    Args:\n        device_id: Device ID\n\n    Returns:\n        License status and details\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        license_info = api.get_license_info()\n        return json.dumps(license_info, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"sysadmin/#mcptool.sysadmin.fortigate_get_security_logs","title":"<code>fortigate_get_security_logs(device_id, count=100, vdom='root')</code>","text":"<p>Get security/attack logs</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>count</code> <code>int</code> <p>Number of log entries to retrieve (default: 100)</p> <code>100</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Security log entries (attacks, intrusions, malware)</p> Source code in <code>mcptool/sysadmin.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_security_logs(device_id: str, count: int = 100, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get security/attack logs\n\n    Args:\n        device_id: Device ID\n        count: Number of log entries to retrieve (default: 100)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Security log entries (attacks, intrusions, malware)\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        logs = api.get_security_logs(count, vdom)\n        return json.dumps(logs, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"sysadmin/#mcptool.sysadmin.fortigate_get_session_table","title":"<code>fortigate_get_session_table(device_id, count=100, vdom='root')</code>","text":"<p>Get active session table</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>count</code> <code>int</code> <p>Number of sessions to retrieve (default: 100)</p> <code>100</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Active firewall sessions</p> Source code in <code>mcptool/sysadmin.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_session_table(device_id: str, count: int = 100, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get active session table\n\n    Args:\n        device_id: Device ID\n        count: Number of sessions to retrieve (default: 100)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Active firewall sessions\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        sessions = api.get_session_table(count, vdom)\n        return json.dumps(sessions, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"sysadmin/#mcptool.sysadmin.fortigate_get_system_logs","title":"<code>fortigate_get_system_logs(device_id, lines=100, level='information')</code>","text":"<p>Get system logs</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>lines</code> <code>int</code> <p>Number of log lines to retrieve (default: 100)</p> <code>100</code> <code>level</code> <code>str</code> <p>Log level (emergency, alert, critical, error, warning, notice, information, debug)</p> <code>'information'</code> <p>Returns:</p> Type Description <code>str</code> <p>System log entries</p> Source code in <code>mcptool/sysadmin.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_system_logs(device_id: str, lines: int = 100, \n                            level: str = \"information\") -&gt; str:\n    \"\"\"\n    Get system logs\n\n    Args:\n        device_id: Device ID\n        lines: Number of log lines to retrieve (default: 100)\n        level: Log level (emergency, alert, critical, error, warning, notice, information, debug)\n\n    Returns:\n        System log entries\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        logs = api.get_system_logs(lines, level)\n        return json.dumps(logs, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"sysadmin/#mcptool.sysadmin.fortigate_get_system_performance","title":"<code>fortigate_get_system_performance(device_id, vdom='root')</code>","text":"<p>Get system performance metrics</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>System performance data (CPU, memory, disk usage)</p> Source code in <code>mcptool/sysadmin.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_system_performance(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get system performance metrics\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        System performance data (CPU, memory, disk usage)\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        performance = api.get_system_performance(vdom)\n        return json.dumps(performance, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"sysadmin/#mcptool.sysadmin.fortigate_get_traffic_logs","title":"<code>fortigate_get_traffic_logs(device_id, count=100, vdom='root')</code>","text":"<p>Get traffic logs</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>count</code> <code>int</code> <p>Number of log entries to retrieve (default: 100)</p> <code>100</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Traffic log entries</p> Source code in <code>mcptool/sysadmin.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_traffic_logs(device_id: str, count: int = 100, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get traffic logs\n\n    Args:\n        device_id: Device ID\n        count: Number of log entries to retrieve (default: 100)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Traffic log entries\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        logs = api.get_traffic_logs(count, vdom)\n        return json.dumps(logs, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"sysadmin/#mcptool.sysadmin.fortigate_reboot_system","title":"<code>fortigate_reboot_system(device_id, event_log_message='System reboot via API')</code>","text":"<p>Reboot FortiGate system</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>event_log_message</code> <code>str</code> <p>Message to log for the reboot event</p> <code>'System reboot via API'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of reboot operation</p> Source code in <code>mcptool/sysadmin.py</code> <pre><code>@mcp.tool()\ndef fortigate_reboot_system(device_id: str, \n                          event_log_message: str = \"System reboot via API\") -&gt; str:\n    \"\"\"\n    Reboot FortiGate system\n\n    Args:\n        device_id: Device ID\n        event_log_message: Message to log for the reboot event\n\n    Returns:\n        Result of reboot operation\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.reboot_system(event_log_message)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"sysadmin/#mcptool.sysadmin.fortigate_restore_config","title":"<code>fortigate_restore_config(device_id, config_data)</code>","text":"<p>Restore FortiGate configuration</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>config_data</code> <code>str</code> <p>Configuration data to restore</p> required <p>Returns:</p> Type Description <code>str</code> <p>Result of configuration restore</p> Source code in <code>mcptool/sysadmin.py</code> <pre><code>@mcp.tool()\ndef fortigate_restore_config(device_id: str, config_data: str) -&gt; str:\n    \"\"\"\n    Restore FortiGate configuration\n\n    Args:\n        device_id: Device ID\n        config_data: Configuration data to restore\n\n    Returns:\n        Result of configuration restore\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.restore_config(config_data)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"sysadmin/#mcptool.sysadmin.fortigate_shutdown_system","title":"<code>fortigate_shutdown_system(device_id, event_log_message='System shutdown via API')</code>","text":"<p>Shutdown FortiGate system</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>event_log_message</code> <code>str</code> <p>Message to log for the shutdown event</p> <code>'System shutdown via API'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of shutdown operation</p> Source code in <code>mcptool/sysadmin.py</code> <pre><code>@mcp.tool()\ndef fortigate_shutdown_system(device_id: str,\n                            event_log_message: str = \"System shutdown via API\") -&gt; str:\n    \"\"\"\n    Shutdown FortiGate system\n\n    Args:\n        device_id: Device ID\n        event_log_message: Message to log for the shutdown event\n\n    Returns:\n        Result of shutdown operation\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.shutdown_system(event_log_message)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"system/","title":"System","text":""},{"location":"system/#mcptool.system.fortigate_get_interfaces","title":"<code>fortigate_get_interfaces(device_id, vdom='root')</code>","text":"<p>Gets configured interfaces</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> Source code in <code>mcptool/system.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_interfaces(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Gets configured interfaces\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        interfaces = api.get_interfaces(vdom)\n        return json.dumps(interfaces, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"system/#mcptool.system.fortigate_get_service_objects","title":"<code>fortigate_get_service_objects(device_id, vdom='root')</code>","text":"<p>Gets configured service objects</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> Source code in <code>mcptool/system.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_service_objects(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Gets configured service objects\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        services = api.get_service_objects(vdom)\n        return json.dumps(services, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"system/#mcptool.system.fortigate_get_system_status","title":"<code>fortigate_get_system_status(device_id)</code>","text":"<p>Gets Fortigate system status</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required Source code in <code>mcptool/system.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_system_status(device_id: str) -&gt; str:\n    \"\"\"\n    Gets Fortigate system status\n\n    Args:\n        device_id: Device ID\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        status = api.get_system_status()\n        return json.dumps(status, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"system/#mcptool.system.fortigate_get_vdoms","title":"<code>fortigate_get_vdoms(device_id)</code>","text":"<p>Lists all VDOMs of a device</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required Source code in <code>mcptool/system.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_vdoms(device_id: str) -&gt; str:\n    \"\"\"\n    Lists all VDOMs of a device\n\n    Args:\n        device_id: Device ID\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        vdoms = api.get_vdoms()\n        return json.dumps(vdoms, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"system/#mcptool.system.fortigate_validate_policy","title":"<code>fortigate_validate_policy(name, srcintf, dstintf, srcaddr, dstaddr, service, action)</code>","text":"<p>Validates the parameters of a policy before creation</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Policy name</p> required <code>srcintf</code> <code>List[str]</code> <p>List of source interfaces</p> required <code>dstintf</code> <code>List[str]</code> <p>List of destination interfaces</p> required <code>srcaddr</code> <code>List[str]</code> <p>List of source addresses</p> required <code>dstaddr</code> <code>List[str]</code> <p>List of destination addresses</p> required <code>service</code> <code>List[str]</code> <p>List of services</p> required <code>action</code> <code>str</code> <p>Action (accept/deny)</p> required Source code in <code>mcptool/system.py</code> <pre><code>@mcp.tool()\ndef fortigate_validate_policy(name: str, srcintf: List[str], dstintf: List[str],\n                             srcaddr: List[str], dstaddr: List[str],\n                             service: List[str], action: str) -&gt; str:\n    \"\"\"\n    Validates the parameters of a policy before creation\n\n    Args:\n        name: Policy name\n        srcintf: List of source interfaces\n        dstintf: List of destination interfaces\n        srcaddr: List of source addresses\n        dstaddr: List of destination addresses\n        service: List of services\n        action: Action (accept/deny)\n    \"\"\"\n    errors = []\n\n    if not name or len(name) &lt; 1:\n        errors.append(\"Policy name required\")\n\n    if not srcintf or len(srcintf) == 0:\n        errors.append(\"At least one source interface required\")\n\n    if not dstintf or len(dstintf) == 0:\n        errors.append(\"At least one destination interface required\")\n\n    if not srcaddr or len(srcaddr) == 0:\n        errors.append(\"At least one source address required\")\n\n    if not dstaddr or len(dstaddr) == 0:\n        errors.append(\"At least one destination address required\")\n\n    if not service or len(service) == 0:\n        errors.append(\"At least one service required\")\n\n    if action not in [\"accept\", \"deny\"]:\n        errors.append(\"Action must be 'accept' or 'deny'\")\n\n    if errors:\n        return f\"Validation errors:\\n- \" + \"\\n- \".join(errors)\n    else:\n        return \"Policy valid - can be created\"\n</code></pre>"},{"location":"users/","title":"Users","text":""},{"location":"users/#mcptool.users.fortigate_create_ldap_server","title":"<code>fortigate_create_ldap_server(device_id, name, server, dn, cnid='cn', type='simple', username=None, password=None, port=389, secure='disable', comments=None, vdom='root')</code>","text":"<p>Create LDAP authentication server</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Server name</p> required <code>server</code> <code>str</code> <p>LDAP server IP/hostname</p> required <code>cnid</code> <code>str</code> <p>Common name identifier</p> <code>'cn'</code> <code>dn</code> <code>str</code> <p>Distinguished name</p> required <code>type</code> <code>str</code> <p>Authentication type (simple, anonymous, regular)</p> <code>'simple'</code> <code>username</code> <code>Optional[str]</code> <p>Bind username (optional)</p> <code>None</code> <code>password</code> <code>Optional[str]</code> <p>Bind password (optional)</p> <code>None</code> <code>port</code> <code>int</code> <p>LDAP port (default: 389)</p> <code>389</code> <code>secure</code> <code>str</code> <p>Secure connection (enable, disable)</p> <code>'disable'</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of server creation</p> Source code in <code>mcptool/users.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_ldap_server(device_id: str, name: str, server: str,\n                                dn: str,\n                                cnid: str = \"cn\",\n                                type: str = \"simple\",\n                                username: Optional[str] = None,\n                                password: Optional[str] = None,\n                                port: int = 389,\n                                secure: str = \"disable\",\n                                comments: Optional[str] = None,\n                                vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create LDAP authentication server\n\n    Args:\n        device_id: Device ID\n        name: Server name\n        server: LDAP server IP/hostname\n        cnid: Common name identifier\n        dn: Distinguished name\n        type: Authentication type (simple, anonymous, regular)\n        username: Bind username (optional)\n        password: Bind password (optional)\n        port: LDAP port (default: 389)\n        secure: Secure connection (enable, disable)\n        comments: Comments (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of server creation\n    \"\"\"\n    try:\n        server_data = {\n            \"name\": name,\n            \"server\": server,\n            \"cnid\": cnid,\n            \"dn\": dn,\n            \"type\": type,\n            \"port\": port,\n            \"secure\": secure\n        }\n\n        if username:\n            server_data[\"username\"] = username\n        if password:\n            server_data[\"password\"] = password\n        if comments:\n            server_data[\"comment\"] = comments\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_ldap_server(server_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"users/#mcptool.users.fortigate_create_local_user","title":"<code>fortigate_create_local_user(device_id, name, password, type='password', status='enable', email_to=None, sms_server=None, sms_phone=None, comments=None, vdom='root')</code>","text":"<p>Create local user</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Username</p> required <code>password</code> <code>str</code> <p>User password</p> required <code>type</code> <code>str</code> <p>Authentication type (password, radius, tacacs+, ldap)</p> <code>'password'</code> <code>status</code> <code>str</code> <p>User status (enable, disable)</p> <code>'enable'</code> <code>email_to</code> <code>Optional[str]</code> <p>Email address for notifications</p> <code>None</code> <code>sms_server</code> <code>Optional[str]</code> <p>SMS server for notifications</p> <code>None</code> <code>sms_phone</code> <code>Optional[str]</code> <p>SMS phone number</p> <code>None</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of user creation</p> Source code in <code>mcptool/users.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_local_user(device_id: str, name: str, password: str,\n                               type: str = \"password\",\n                               status: str = \"enable\",\n                               email_to: Optional[str] = None,\n                               sms_server: Optional[str] = None,\n                               sms_phone: Optional[str] = None,\n                               comments: Optional[str] = None,\n                               vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create local user\n\n    Args:\n        device_id: Device ID\n        name: Username\n        password: User password\n        type: Authentication type (password, radius, tacacs+, ldap)\n        status: User status (enable, disable)\n        email_to: Email address for notifications\n        sms_server: SMS server for notifications\n        sms_phone: SMS phone number\n        comments: Comments (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of user creation\n    \"\"\"\n    try:\n        user_data = {\n            \"name\": name,\n            \"type\": type,\n            \"status\": status,\n            \"passwd\": password\n        }\n\n        if email_to:\n            user_data[\"email-to\"] = email_to\n        if sms_server:\n            user_data[\"sms-server\"] = sms_server\n        if sms_phone:\n            user_data[\"sms-phone\"] = sms_phone\n        if comments:\n            user_data[\"comment\"] = comments\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_local_user(user_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"users/#mcptool.users.fortigate_create_radius_server","title":"<code>fortigate_create_radius_server(device_id, name, server, secret, auth_type='auto', port=1812, timeout=5, all_usergroup='disable', use_management_vdom='disable', nas_ip=None, comments=None, vdom='root')</code>","text":"<p>Create RADIUS authentication server</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Server name</p> required <code>server</code> <code>str</code> <p>RADIUS server IP/hostname</p> required <code>secret</code> <code>str</code> <p>Shared secret</p> required <code>auth_type</code> <code>str</code> <p>Authentication type (auto, ms_chap_v2, ms_chap, chap, pap)</p> <code>'auto'</code> <code>port</code> <code>int</code> <p>RADIUS port (default: 1812)</p> <code>1812</code> <code>timeout</code> <code>int</code> <p>Timeout in seconds (default: 5)</p> <code>5</code> <code>all_usergroup</code> <code>str</code> <p>Include all user groups (enable, disable)</p> <code>'disable'</code> <code>use_management_vdom</code> <code>str</code> <p>Use management VDOM (enable, disable)</p> <code>'disable'</code> <code>nas_ip</code> <code>Optional[str]</code> <p>NAS IP address (optional)</p> <code>None</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of server creation</p> Source code in <code>mcptool/users.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_radius_server(device_id: str, name: str, server: str,\n                                  secret: str,\n                                  auth_type: str = \"auto\",\n                                  port: int = 1812,\n                                  timeout: int = 5,\n                                  all_usergroup: str = \"disable\",\n                                  use_management_vdom: str = \"disable\",\n                                  nas_ip: Optional[str] = None,\n                                  comments: Optional[str] = None,\n                                  vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create RADIUS authentication server\n\n    Args:\n        device_id: Device ID\n        name: Server name\n        server: RADIUS server IP/hostname\n        secret: Shared secret\n        auth_type: Authentication type (auto, ms_chap_v2, ms_chap, chap, pap)\n        port: RADIUS port (default: 1812)\n        timeout: Timeout in seconds (default: 5)\n        all_usergroup: Include all user groups (enable, disable)\n        use_management_vdom: Use management VDOM (enable, disable)\n        nas_ip: NAS IP address (optional)\n        comments: Comments (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of server creation\n    \"\"\"\n    try:\n        server_data = {\n            \"name\": name,\n            \"server\": server,\n            \"secret\": secret,\n            \"auth-type\": auth_type,\n            \"port\": port,\n            \"timeout\": timeout,\n            \"all-usergroup\": all_usergroup,\n            \"use-management-vdom\": use_management_vdom\n        }\n\n        if nas_ip:\n            server_data[\"nas-ip\"] = nas_ip\n        if comments:\n            server_data[\"comment\"] = comments\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_radius_server(server_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"users/#mcptool.users.fortigate_create_user_group","title":"<code>fortigate_create_user_group(device_id, name, auth_concurrent_override='disable', auth_concurrent_value=0, authtimeout=0, http_digest_realm=None, sso_attribute_value=None, comments=None, members=None, vdom='root')</code>","text":"<p>Create user group</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Group name</p> required <code>auth_concurrent_override</code> <code>str</code> <p>Override concurrent authentication (enable, disable)</p> <code>'disable'</code> <code>auth_concurrent_value</code> <code>int</code> <p>Maximum concurrent authentications</p> <code>0</code> <code>authtimeout</code> <code>int</code> <p>Authentication timeout (minutes)</p> <code>0</code> <code>http_digest_realm</code> <code>Optional[str]</code> <p>HTTP digest realm</p> <code>None</code> <code>sso_attribute_value</code> <code>Optional[str]</code> <p>SSO attribute value</p> <code>None</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>members</code> <code>Optional[List[str]]</code> <p>List of group members (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of group creation</p> Source code in <code>mcptool/users.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_user_group(device_id: str, name: str,\n                               auth_concurrent_override: str = \"disable\",\n                               auth_concurrent_value: int = 0,\n                               authtimeout: int = 0,\n                               http_digest_realm: Optional[str] = None,\n                               sso_attribute_value: Optional[str] = None,\n                               comments: Optional[str] = None,\n                               members: Optional[List[str]] = None,\n                               vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create user group\n\n    Args:\n        device_id: Device ID\n        name: Group name\n        auth_concurrent_override: Override concurrent authentication (enable, disable)\n        auth_concurrent_value: Maximum concurrent authentications\n        authtimeout: Authentication timeout (minutes)\n        http_digest_realm: HTTP digest realm\n        sso_attribute_value: SSO attribute value\n        comments: Comments (optional)\n        members: List of group members (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of group creation\n    \"\"\"\n    try:\n        group_data = {\n            \"name\": name,\n            \"auth-concurrent-override\": auth_concurrent_override,\n            \"auth-concurrent-value\": auth_concurrent_value,\n            \"authtimeout\": authtimeout\n        }\n\n        if http_digest_realm:\n            group_data[\"http-digest-realm\"] = http_digest_realm\n        if sso_attribute_value:\n            group_data[\"sso-attribute-value\"] = sso_attribute_value\n        if comments:\n            group_data[\"comment\"] = comments\n        if members:\n            group_data[\"member\"] = [{\"name\": member} for member in members]\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_user_group(group_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"users/#mcptool.users.fortigate_delete_ldap_server","title":"<code>fortigate_delete_ldap_server(device_id, server_name, vdom='root')</code>","text":"<p>Delete LDAP authentication server</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>server_name</code> <code>str</code> <p>Server name to delete</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of server deletion</p> Source code in <code>mcptool/users.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_ldap_server(device_id: str, server_name: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Delete LDAP authentication server\n\n    Args:\n        device_id: Device ID\n        server_name: Server name to delete\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of server deletion\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_ldap_server(server_name, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"users/#mcptool.users.fortigate_delete_local_user","title":"<code>fortigate_delete_local_user(device_id, username, vdom='root')</code>","text":"<p>Delete local user</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>username</code> <code>str</code> <p>Username to delete</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of user deletion</p> Source code in <code>mcptool/users.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_local_user(device_id: str, username: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Delete local user\n\n    Args:\n        device_id: Device ID\n        username: Username to delete\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of user deletion\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_local_user(username, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"users/#mcptool.users.fortigate_delete_radius_server","title":"<code>fortigate_delete_radius_server(device_id, server_name, vdom='root')</code>","text":"<p>Delete RADIUS authentication server</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>server_name</code> <code>str</code> <p>Server name to delete</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of server deletion</p> Source code in <code>mcptool/users.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_radius_server(device_id: str, server_name: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Delete RADIUS authentication server\n\n    Args:\n        device_id: Device ID\n        server_name: Server name to delete\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of server deletion\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_radius_server(server_name, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"users/#mcptool.users.fortigate_delete_user_group","title":"<code>fortigate_delete_user_group(device_id, group_name, vdom='root')</code>","text":"<p>Delete user group</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>group_name</code> <code>str</code> <p>Group name to delete</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of group deletion</p> Source code in <code>mcptool/users.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_user_group(device_id: str, group_name: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Delete user group\n\n    Args:\n        device_id: Device ID\n        group_name: Group name to delete\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of group deletion\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_user_group(group_name, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"users/#mcptool.users.fortigate_get_ldap_servers","title":"<code>fortigate_get_ldap_servers(device_id, vdom='root')</code>","text":"<p>Get all LDAP authentication servers</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of LDAP servers</p> Source code in <code>mcptool/users.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_ldap_servers(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get all LDAP authentication servers\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of LDAP servers\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        servers = api.get_auth_servers(vdom)\n        return json.dumps(servers, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"users/#mcptool.users.fortigate_get_local_users","title":"<code>fortigate_get_local_users(device_id, vdom='root')</code>","text":"<p>Get all local users</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of local users</p> Source code in <code>mcptool/users.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_local_users(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get all local users\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of local users\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        users = api.get_local_users(vdom)\n        return json.dumps(users, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"users/#mcptool.users.fortigate_get_radius_servers","title":"<code>fortigate_get_radius_servers(device_id, vdom='root')</code>","text":"<p>Get all RADIUS authentication servers</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of RADIUS servers</p> Source code in <code>mcptool/users.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_radius_servers(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get all RADIUS authentication servers\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of RADIUS servers\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        servers = api.get_radius_servers(vdom)\n        return json.dumps(servers, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"users/#mcptool.users.fortigate_get_user_groups","title":"<code>fortigate_get_user_groups(device_id, vdom='root')</code>","text":"<p>Get all user groups</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of user groups</p> Source code in <code>mcptool/users.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_user_groups(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get all user groups\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of user groups\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        groups = api.get_user_groups(vdom)\n        return json.dumps(groups, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"users/#mcptool.users.fortigate_update_local_user","title":"<code>fortigate_update_local_user(device_id, username, password=None, type=None, status=None, email_to=None, sms_server=None, sms_phone=None, comments=None, vdom='root')</code>","text":"<p>Update local user</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>username</code> <code>str</code> <p>Username to update</p> required <code>password</code> <code>Optional[str]</code> <p>New password (optional)</p> <code>None</code> <code>type</code> <code>Optional[str]</code> <p>Authentication type (optional)</p> <code>None</code> <code>status</code> <code>Optional[str]</code> <p>User status (optional)</p> <code>None</code> <code>email_to</code> <code>Optional[str]</code> <p>Email address (optional)</p> <code>None</code> <code>sms_server</code> <code>Optional[str]</code> <p>SMS server (optional)</p> <code>None</code> <code>sms_phone</code> <code>Optional[str]</code> <p>SMS phone number (optional)</p> <code>None</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of user update</p> Source code in <code>mcptool/users.py</code> <pre><code>@mcp.tool()\ndef fortigate_update_local_user(device_id: str, username: str,\n                               password: Optional[str] = None,\n                               type: Optional[str] = None,\n                               status: Optional[str] = None,\n                               email_to: Optional[str] = None,\n                               sms_server: Optional[str] = None,\n                               sms_phone: Optional[str] = None,\n                               comments: Optional[str] = None,\n                               vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Update local user\n\n    Args:\n        device_id: Device ID\n        username: Username to update\n        password: New password (optional)\n        type: Authentication type (optional)\n        status: User status (optional)\n        email_to: Email address (optional)\n        sms_server: SMS server (optional)\n        sms_phone: SMS phone number (optional)\n        comments: Comments (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of user update\n    \"\"\"\n    try:\n        user_data = {}\n\n        if password:\n            user_data[\"passwd\"] = password\n        if type:\n            user_data[\"type\"] = type\n        if status:\n            user_data[\"status\"] = status\n        if email_to:\n            user_data[\"email-to\"] = email_to\n        if sms_server:\n            user_data[\"sms-server\"] = sms_server\n        if sms_phone:\n            user_data[\"sms-phone\"] = sms_phone\n        if comments:\n            user_data[\"comment\"] = comments\n\n        if not user_data:\n            return \"Error: No fields provided to update\"\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.update_local_user(username, user_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/","title":"VPN","text":""},{"location":"vpn/#mcptool.vpn.fortigate_create_ipsec_phase1","title":"<code>fortigate_create_ipsec_phase1(device_id, name, interface, remote_gw, psk, proposal='aes128-sha256 aes256-sha256', dhgrp='14 5', nattraversal='enable', keepalive=10, dead_peer_detection='on-idle', mode='main', peertype='any', comments=None, vdom='root')</code>","text":"<p>Create IPSec phase 1 interface</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Interface name</p> required <code>interface</code> <code>str</code> <p>Physical interface</p> required <code>remote_gw</code> <code>str</code> <p>Remote gateway IP</p> required <code>psk</code> <code>str</code> <p>Pre-shared key</p> required <code>proposal</code> <code>str</code> <p>Encryption proposal</p> <code>'aes128-sha256 aes256-sha256'</code> <code>dhgrp</code> <code>str</code> <p>Diffie-Hellman groups</p> <code>'14 5'</code> <code>nattraversal</code> <code>str</code> <p>NAT traversal (enable, disable)</p> <code>'enable'</code> <code>keepalive</code> <code>int</code> <p>Keepalive frequency</p> <code>10</code> <code>dead_peer_detection</code> <code>str</code> <p>DPD setting (on-idle, on-demand, disable)</p> <code>'on-idle'</code> <code>mode</code> <code>str</code> <p>IKE mode (main, aggressive)</p> <code>'main'</code> <code>peertype</code> <code>str</code> <p>Peer type (any, one, dialup, peer, peergrp)</p> <code>'any'</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of phase 1 creation</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_ipsec_phase1(device_id: str, name: str, interface: str,\n                                 remote_gw: str, psk: str,\n                                 proposal: str = \"aes128-sha256 aes256-sha256\",\n                                 dhgrp: str = \"14 5\",\n                                 nattraversal: str = \"enable\",\n                                 keepalive: int = 10,\n                                 dead_peer_detection: str = \"on-idle\",\n                                 mode: str = \"main\",\n                                 peertype: str = \"any\",\n                                 comments: Optional[str] = None,\n                                 vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create IPSec phase 1 interface\n\n    Args:\n        device_id: Device ID\n        name: Interface name\n        interface: Physical interface\n        remote_gw: Remote gateway IP\n        psk: Pre-shared key\n        proposal: Encryption proposal\n        dhgrp: Diffie-Hellman groups\n        nattraversal: NAT traversal (enable, disable)\n        keepalive: Keepalive frequency\n        dead_peer_detection: DPD setting (on-idle, on-demand, disable)\n        mode: IKE mode (main, aggressive)\n        peertype: Peer type (any, one, dialup, peer, peergrp)\n        comments: Comments (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of phase 1 creation\n    \"\"\"\n    try:\n        phase1_data = {\n            \"name\": name,\n            \"interface\": interface,\n            \"remote-gw\": remote_gw,\n            \"psksecret\": psk,\n            \"proposal\": proposal,\n            \"dhgrp\": dhgrp,\n            \"nattraversal\": nattraversal,\n            \"keepalive\": keepalive,\n            \"dpd\": dead_peer_detection,\n            \"mode\": mode,\n            \"peertype\": peertype\n        }\n\n        if comments:\n            phase1_data[\"comments\"] = comments\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_ipsec_phase1(phase1_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/#mcptool.vpn.fortigate_create_ipsec_phase2","title":"<code>fortigate_create_ipsec_phase2(device_id, name, phase1name, proposal='aes128-sha1 aes256-sha256', dhgrp='14 5', pfs='enable', keepalive='enable', auto_negotiate='enable', src_subnet='0.0.0.0/0', dst_subnet='0.0.0.0/0', comments=None, vdom='root')</code>","text":"<p>Create IPSec phase 2 interface</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Interface name</p> required <code>phase1name</code> <code>str</code> <p>Associated phase 1 interface</p> required <code>proposal</code> <code>str</code> <p>Encryption proposal</p> <code>'aes128-sha1 aes256-sha256'</code> <code>dhgrp</code> <code>str</code> <p>Diffie-Hellman groups</p> <code>'14 5'</code> <code>pfs</code> <code>str</code> <p>Perfect Forward Secrecy (enable, disable)</p> <code>'enable'</code> <code>keepalive</code> <code>str</code> <p>Keepalive (enable, disable)</p> <code>'enable'</code> <code>auto_negotiate</code> <code>str</code> <p>Auto negotiate (enable, disable)</p> <code>'enable'</code> <code>src_subnet</code> <code>str</code> <p>Source subnet</p> <code>'0.0.0.0/0'</code> <code>dst_subnet</code> <code>str</code> <p>Destination subnet</p> <code>'0.0.0.0/0'</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of phase 2 creation</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_ipsec_phase2(device_id: str, name: str, phase1name: str,\n                                 proposal: str = \"aes128-sha1 aes256-sha256\",\n                                 dhgrp: str = \"14 5\",\n                                 pfs: str = \"enable\",\n                                 keepalive: str = \"enable\",\n                                 auto_negotiate: str = \"enable\",\n                                 src_subnet: str = \"0.0.0.0/0\",\n                                 dst_subnet: str = \"0.0.0.0/0\",\n                                 comments: Optional[str] = None,\n                                 vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create IPSec phase 2 interface\n\n    Args:\n        device_id: Device ID\n        name: Interface name\n        phase1name: Associated phase 1 interface\n        proposal: Encryption proposal\n        dhgrp: Diffie-Hellman groups\n        pfs: Perfect Forward Secrecy (enable, disable)\n        keepalive: Keepalive (enable, disable)\n        auto_negotiate: Auto negotiate (enable, disable)\n        src_subnet: Source subnet\n        dst_subnet: Destination subnet\n        comments: Comments (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of phase 2 creation\n    \"\"\"\n    try:\n        phase2_data = {\n            \"name\": name,\n            \"phase1name\": phase1name,\n            \"proposal\": proposal,\n            \"dhgrp\": dhgrp,\n            \"pfs\": pfs,\n            \"keepalive\": keepalive,\n            \"auto-negotiate\": auto_negotiate,\n            \"src-subnet\": src_subnet,\n            \"dst-subnet\": dst_subnet\n        }\n\n        if comments:\n            phase2_data[\"comments\"] = comments\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_ipsec_phase2(phase2_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/#mcptool.vpn.fortigate_create_ssl_vpn_portal","title":"<code>fortigate_create_ssl_vpn_portal(device_id, name, tunnel_mode='enable', web_mode='enable', ip_pools=None, exclusive_routing='disable', auto_connect='disable', keep_alive='enable', save_password='disable', split_tunneling='enable', theme='blue', comments=None, vdom='root')</code>","text":"<p>Create SSL VPN portal</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>name</code> <code>str</code> <p>Portal name</p> required <code>tunnel_mode</code> <code>str</code> <p>Tunnel mode (enable, disable)</p> <code>'enable'</code> <code>web_mode</code> <code>str</code> <p>Web mode (enable, disable)</p> <code>'enable'</code> <code>ip_pools</code> <code>Optional[List[str]]</code> <p>IP pools for clients</p> <code>None</code> <code>exclusive_routing</code> <code>str</code> <p>Exclusive routing (enable, disable)</p> <code>'disable'</code> <code>auto_connect</code> <code>str</code> <p>Auto connect (enable, disable)</p> <code>'disable'</code> <code>keep_alive</code> <code>str</code> <p>Keep alive (enable, disable)</p> <code>'enable'</code> <code>save_password</code> <code>str</code> <p>Save password (enable, disable)</p> <code>'disable'</code> <code>split_tunneling</code> <code>str</code> <p>Split tunneling (enable, disable)</p> <code>'enable'</code> <code>theme</code> <code>str</code> <p>Portal theme (blue, green, red, melongene, mariner)</p> <code>'blue'</code> <code>comments</code> <code>Optional[str]</code> <p>Comments (optional)</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of portal creation</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_create_ssl_vpn_portal(device_id: str, name: str,\n                                  tunnel_mode: str = \"enable\",\n                                  web_mode: str = \"enable\",\n                                  ip_pools: Optional[List[str]] = None,\n                                  exclusive_routing: str = \"disable\",\n                                  auto_connect: str = \"disable\",\n                                  keep_alive: str = \"enable\",\n                                  save_password: str = \"disable\",\n                                  split_tunneling: str = \"enable\",\n                                  theme: str = \"blue\",\n                                  comments: Optional[str] = None,\n                                  vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Create SSL VPN portal\n\n    Args:\n        device_id: Device ID\n        name: Portal name\n        tunnel_mode: Tunnel mode (enable, disable)\n        web_mode: Web mode (enable, disable)\n        ip_pools: IP pools for clients\n        exclusive_routing: Exclusive routing (enable, disable)\n        auto_connect: Auto connect (enable, disable)\n        keep_alive: Keep alive (enable, disable)\n        save_password: Save password (enable, disable)\n        split_tunneling: Split tunneling (enable, disable)\n        theme: Portal theme (blue, green, red, melongene, mariner)\n        comments: Comments (optional)\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of portal creation\n    \"\"\"\n    try:\n        portal_data = {\n            \"name\": name,\n            \"tunnel-mode\": tunnel_mode,\n            \"web-mode\": web_mode,\n            \"exclusive-routing\": exclusive_routing,\n            \"auto-connect\": auto_connect,\n            \"keep-alive\": keep_alive,\n            \"save-password\": save_password,\n            \"split-tunneling\": split_tunneling,\n            \"theme\": theme\n        }\n\n        if ip_pools:\n            portal_data[\"ip-pools\"] = [{\"name\": pool} for pool in ip_pools]\n        if comments:\n            portal_data[\"comment\"] = comments\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.create_ssl_vpn_portal(portal_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/#mcptool.vpn.fortigate_delete_ipsec_phase1","title":"<code>fortigate_delete_ipsec_phase1(device_id, interface_name, vdom='root')</code>","text":"<p>Delete IPSec phase 1 interface</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>interface_name</code> <code>str</code> <p>Interface name to delete</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of phase 1 deletion</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_ipsec_phase1(device_id: str, interface_name: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Delete IPSec phase 1 interface\n\n    Args:\n        device_id: Device ID\n        interface_name: Interface name to delete\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of phase 1 deletion\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_ipsec_phase1(interface_name, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/#mcptool.vpn.fortigate_delete_ipsec_phase2","title":"<code>fortigate_delete_ipsec_phase2(device_id, interface_name, vdom='root')</code>","text":"<p>Delete IPSec phase 2 interface</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>interface_name</code> <code>str</code> <p>Interface name to delete</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of phase 2 deletion</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_ipsec_phase2(device_id: str, interface_name: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Delete IPSec phase 2 interface\n\n    Args:\n        device_id: Device ID\n        interface_name: Interface name to delete\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of phase 2 deletion\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_ipsec_phase2(interface_name, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/#mcptool.vpn.fortigate_delete_ssl_vpn_portal","title":"<code>fortigate_delete_ssl_vpn_portal(device_id, portal_name, vdom='root')</code>","text":"<p>Delete SSL VPN portal</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>portal_name</code> <code>str</code> <p>Portal name to delete</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of portal deletion</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_delete_ssl_vpn_portal(device_id: str, portal_name: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Delete SSL VPN portal\n\n    Args:\n        device_id: Device ID\n        portal_name: Portal name to delete\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of portal deletion\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        result = api.delete_ssl_vpn_portal(portal_name, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/#mcptool.vpn.fortigate_get_ipsec_phase1","title":"<code>fortigate_get_ipsec_phase1(device_id, vdom='root')</code>","text":"<p>Get all IPSec phase 1 configurations</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of IPSec phase 1 configurations</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_ipsec_phase1(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get all IPSec phase 1 configurations\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of IPSec phase 1 configurations\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        phase1 = api.get_ipsec_phase1(vdom)\n        return json.dumps(phase1, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/#mcptool.vpn.fortigate_get_ipsec_phase2","title":"<code>fortigate_get_ipsec_phase2(device_id, vdom='root')</code>","text":"<p>Get all IPSec phase 2 configurations</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of IPSec phase 2 configurations</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_ipsec_phase2(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get all IPSec phase 2 configurations\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of IPSec phase 2 configurations\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        phase2 = api.get_ipsec_phase2(vdom)\n        return json.dumps(phase2, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/#mcptool.vpn.fortigate_get_ipsec_tunnel_status","title":"<code>fortigate_get_ipsec_tunnel_status(device_id, vdom='root')</code>","text":"<p>Get IPSec tunnel status</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>IPSec tunnel status information</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_ipsec_tunnel_status(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get IPSec tunnel status\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        IPSec tunnel status information\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        status = api.get_ipsec_tunnels_status(vdom)\n        return json.dumps(status, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/#mcptool.vpn.fortigate_get_ssl_vpn_portals","title":"<code>fortigate_get_ssl_vpn_portals(device_id, vdom='root')</code>","text":"<p>Get SSL VPN portals</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of SSL VPN portals</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_ssl_vpn_portals(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get SSL VPN portals\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of SSL VPN portals\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        portals = api.get_ssl_vpn_portals(vdom)\n        return json.dumps(portals, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/#mcptool.vpn.fortigate_get_ssl_vpn_settings","title":"<code>fortigate_get_ssl_vpn_settings(device_id, vdom='root')</code>","text":"<p>Get SSL VPN settings</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>SSL VPN settings</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_ssl_vpn_settings(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get SSL VPN settings\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        SSL VPN settings\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        settings = api.get_ssl_vpn_settings(vdom)\n        return json.dumps(settings, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/#mcptool.vpn.fortigate_get_ssl_vpn_status","title":"<code>fortigate_get_ssl_vpn_status(device_id, vdom='root')</code>","text":"<p>Get SSL VPN status</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>SSL VPN status information</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_ssl_vpn_status(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get SSL VPN status\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        SSL VPN status information\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        status = api.get_ssl_vpn_status(vdom)\n        return json.dumps(status, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/#mcptool.vpn.fortigate_get_vpn_certificates","title":"<code>fortigate_get_vpn_certificates(device_id, vdom='root')</code>","text":"<p>Get VPN certificates</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>List of VPN certificates</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_get_vpn_certificates(device_id: str, vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Get VPN certificates\n\n    Args:\n        device_id: Device ID\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        List of VPN certificates\n    \"\"\"\n    try:\n        api = fortigate_manager.get_device(device_id)\n        certificates = api.get_vpn_certificates(vdom)\n        return json.dumps(certificates, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"vpn/#mcptool.vpn.fortigate_update_ssl_vpn_settings","title":"<code>fortigate_update_ssl_vpn_settings(device_id, status=None, port=None, source_interface=None, source_address=None, default_portal=None, tunnel_ip_pools=None, dns_server1=None, dns_server2=None, wins_server1=None, wins_server2=None, vdom='root')</code>","text":"<p>Update SSL VPN settings</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>Device ID</p> required <code>status</code> <code>Optional[str]</code> <p>SSL VPN status (enable, disable)</p> <code>None</code> <code>port</code> <code>Optional[int]</code> <p>SSL VPN port (default: 443)</p> <code>None</code> <code>source_interface</code> <code>Optional[List[str]]</code> <p>Source interfaces</p> <code>None</code> <code>source_address</code> <code>Optional[List[str]]</code> <p>Source addresses</p> <code>None</code> <code>default_portal</code> <code>Optional[str]</code> <p>Default portal</p> <code>None</code> <code>tunnel_ip_pools</code> <code>Optional[List[str]]</code> <p>Tunnel IP pools</p> <code>None</code> <code>dns_server1</code> <code>Optional[str]</code> <p>Primary DNS server</p> <code>None</code> <code>dns_server2</code> <code>Optional[str]</code> <p>Secondary DNS server</p> <code>None</code> <code>wins_server1</code> <code>Optional[str]</code> <p>Primary WINS server</p> <code>None</code> <code>wins_server2</code> <code>Optional[str]</code> <p>Secondary WINS server</p> <code>None</code> <code>vdom</code> <code>str</code> <p>Target VDOM (default: root)</p> <code>'root'</code> <p>Returns:</p> Type Description <code>str</code> <p>Result of settings update</p> Source code in <code>mcptool/vpn.py</code> <pre><code>@mcp.tool()\ndef fortigate_update_ssl_vpn_settings(device_id: str,\n                                    status: Optional[str] = None,\n                                    port: Optional[int] = None,\n                                    source_interface: Optional[List[str]] = None,\n                                    source_address: Optional[List[str]] = None,\n                                    default_portal: Optional[str] = None,\n                                    tunnel_ip_pools: Optional[List[str]] = None,\n                                    dns_server1: Optional[str] = None,\n                                    dns_server2: Optional[str] = None,\n                                    wins_server1: Optional[str] = None,\n                                    wins_server2: Optional[str] = None,\n                                    vdom: str = \"root\") -&gt; str:\n    \"\"\"\n    Update SSL VPN settings\n\n    Args:\n        device_id: Device ID\n        status: SSL VPN status (enable, disable)\n        port: SSL VPN port (default: 443)\n        source_interface: Source interfaces\n        source_address: Source addresses\n        default_portal: Default portal\n        tunnel_ip_pools: Tunnel IP pools\n        dns_server1: Primary DNS server\n        dns_server2: Secondary DNS server\n        wins_server1: Primary WINS server\n        wins_server2: Secondary WINS server\n        vdom: Target VDOM (default: root)\n\n    Returns:\n        Result of settings update\n    \"\"\"\n    try:\n        settings_data = {}\n\n        if status:\n            settings_data[\"status\"] = status\n        if port:\n            settings_data[\"port\"] = port\n        if source_interface:\n            settings_data[\"source-interface\"] = [{\"name\": intf} for intf in source_interface]\n        if source_address:\n            settings_data[\"source-address\"] = [{\"name\": addr} for addr in source_address]\n        if default_portal:\n            settings_data[\"default-portal\"] = default_portal\n        if tunnel_ip_pools:\n            settings_data[\"tunnel-ip-pools\"] = [{\"name\": pool} for pool in tunnel_ip_pools]\n        if dns_server1:\n            settings_data[\"dns-server1\"] = dns_server1\n        if dns_server2:\n            settings_data[\"dns-server2\"] = dns_server2\n        if wins_server1:\n            settings_data[\"wins-server1\"] = wins_server1\n        if wins_server2:\n            settings_data[\"wins-server2\"] = wins_server2\n\n        if not settings_data:\n            return \"Error: No settings provided to update\"\n\n        api = fortigate_manager.get_device(device_id)\n        result = api.update_ssl_vpn_settings(settings_data, vdom)\n        return json.dumps(result, indent=2)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"}]}